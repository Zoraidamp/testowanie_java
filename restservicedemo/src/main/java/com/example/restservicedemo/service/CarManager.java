package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Car;

public class CarManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_CAR = "CREATE TABLE Car(id bigint GENERATED BY DEFAULT AS IDENTITY, make varchar(20), model varchar(20), yop integer, owner bigint)";

	private PreparedStatement addCarStmt;
	private PreparedStatement deleteAllCarsStmt;
	private PreparedStatement getAllCarsStmt;
	private PreparedStatement getCarByIdStmt;

	private Statement statement;

	public CarManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_CAR);

			addCarStmt = connection
					.prepareStatement("INSERT INTO Car (id, make, model, yop, owner) VALUES (?, ?, ?, ?, ?)");
			deleteAllCarsStmt = connection
					.prepareStatement("DELETE FROM Car");
			getAllCarsStmt = connection
					.prepareStatement("SELECT id, make, model, yop, owner FROM Car");
			getCarByIdStmt = connection
					.prepareStatement("SELECT id, make, model, yop, owner FROM Car where id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearCars() {
		try {
			deleteAllCarsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addCar(Car Car) {
		int count = 0;
		try {
			addCarStmt.setLong(1, Car.getId());
			addCarStmt.setString(2, Car.getMake());
			addCarStmt.setString(3, Car.getModel());
			addCarStmt.setInt(4, Car.getYop());
			addCarStmt.setLong(5, Car.getOwner());
			count = addCarStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Car> getAllCars() {
		List<Car> Cars = new ArrayList<Car>();

		try {
			ResultSet rs = getAllCarsStmt.executeQuery();

			while (rs.next()) {
				Car p = new Car();
				p.setId(rs.getInt("id"));
				p.setMake(rs.getString("make"));
				p.setModel(rs.getString("model"));
				p.setYop(rs.getInt("yop"));
				p.setOwner(rs.getLong("owner"));
				Cars.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Cars;
	}

	public Car getCar(Long id) {
		Car p = new Car();
		try {
			getCarByIdStmt.setLong(1, id);
			ResultSet rs = getCarByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setMake(rs.getString("make"));
				p.setModel(rs.getString("model"));
				p.setYop(rs.getInt("yop"));
				p.setOwner(rs.getInt("owner"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return p;
	}

}
